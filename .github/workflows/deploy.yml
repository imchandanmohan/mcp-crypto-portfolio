name: Build & Deploy MCP Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mcp-crypto-portfolio
  APP_PATH: /home/ec2-user/mcp-crypto-portfolio

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: meta
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "tag=main-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || github.token }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ steps.meta.outputs.tag }} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push image
        run: |
          docker push $IMAGE_NAME:${{ steps.meta.outputs.tag }}
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (needed for scp sources)
        uses: actions/checkout@v4

      - name: Test SSH key format
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          if [[ -z "$SSH_KEY" ]]; then
            echo "EC2_SSH_KEY is empty"; exit 1
          fi
          echo "SSH key starts with:"
          echo "$SSH_KEY" | head -n 1
          echo "SSH key ends with:"
          echo "$SSH_KEY" | tail -n 1

      - name: Validate workspace files
        run: |
          ls -la
          test -f docker-compose.yml || (echo "missing docker-compose.yml" && exit 1)
          test -f nginx.conf || (echo "missing nginx.conf" && exit 1)

      - name: Upload compose & nginx.conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ec2-user' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "./docker-compose.yml,./nginx.conf"
          target: ${{ env.APP_PATH }}
          overwrite: true
          debug: true

      - name: Install Docker on EC2 (if needed)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ec2-user' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER
              
              # Install Docker Compose
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
              
              echo "Docker and Docker Compose installed"
            else
              echo "Docker already installed"
            fi

      - name: Deploy application on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ec2-user' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: IMAGE_NAME
          script: |
            set -e
            cd "${{ env.APP_PATH }}"
            
            # Ensure Docker is running
            sudo systemctl start docker
            
            echo "Using IMAGE_NAME: $IMAGE_NAME"
            
            # Export environment variables for docker-compose
            export IMAGE_NAME="$IMAGE_NAME"
            export TAG=latest
            
            # Use sudo for Docker commands to ensure permissions
            sudo -E docker-compose pull
            sudo -E docker-compose up -d
            sudo docker image prune -f
            sudo -E docker-compose ps