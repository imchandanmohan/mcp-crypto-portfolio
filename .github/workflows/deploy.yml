name: Build & Deploy MCP Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mcp-crypto-portfolio
  # Where files live on EC2 (change if you prefer another path)
  APP_PATH: ${{ secrets.EC2_PATH || '/home/ubuntu/mcp-crypto-portfolio' }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # needed to push to GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: meta
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "tag=main-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # Prefer GHCR_PAT if you created one; otherwise fall back to GITHUB_TOKEN
          password: ${{ secrets.GHCR_PAT || github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ steps.meta.outputs.tag }} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push image
        run: |
          docker push $IMAGE_NAME:${{ steps.meta.outputs.tag }}
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Upload compose & nginx.conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}        # e.g. your Elastic IP
          username: ${{ secrets.EC2_USER }}    # usually "ubuntu"
          key: ${{ secrets.EC2_SSH_KEY }}      # full private key contents
          source: "docker-compose.yml,nginx.conf"
          target: ${{ env.APP_PATH }}

      - name: Deploy on EC2 (pull image & restart)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.APP_PATH }}

            # First-time setup (idempotent)
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo usermod -aG docker $USER || true
            fi

            echo "Using image $IMAGE_NAME:latest"
            export TAG=latest

            # Pull new image & (re)start
            docker compose pull
            docker compose up -d

            # Clean old dangling images
            docker image prune -f

            # Show status
            docker compose ps
