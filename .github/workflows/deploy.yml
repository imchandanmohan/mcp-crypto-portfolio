name: Build & Deploy MCP Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mcp-crypto-portfolio
  APP_PATH: /home/ubuntu/mcp-crypto-portfolio

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: meta
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "tag=main-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # If you created a PAT, it will be secrets.GHCR_PAT; otherwise fallback to GITHUB_TOKEN
          password: ${{ secrets.GHCR_PAT || github.token }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ steps.meta.outputs.tag }} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push image
        run: |
          docker push $IMAGE_NAME:${{ steps.meta.outputs.tag }}
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (needed for scp sources)
        uses: actions/checkout@v4

      - name: Recreate SSH key file from Base64 secret
        id: sshkey
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > id_ec2
          chmod 600 id_ec2
          echo "key_path=$PWD/id_ec2" >> $GITHUB_OUTPUT

      - name: Validate workspace files
        run: |
          ls -la
          test -f docker-compose.yml || (echo "missing docker-compose.yml" && exit 1)
          test -f nginx.conf || (echo "missing nginx.conf" && exit 1)

      - name: Ensure target dir exists on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}       # e.g., 52.58.x.x (no scheme)
          username: ${{ secrets.EC2_USER }}   # e.g., ubuntu
          key_path: ${{ steps.sshkey.outputs.key_path }}
          port: 22
          script: |
            set -e
            mkdir -p "${{ env.APP_PATH }}"
            ls -la "${{ env.APP_PATH }}"

      - name: Upload compose & nginx.conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ steps.sshkey.outputs.key_path }}
          port: 22
          source: "./docker-compose.yml,./nginx.conf"
          target: ${{ env.APP_PATH }}
          overwrite: true
          strip_components: 0
          timeout: 120s
          debug: true

      - name: Deploy on EC2 (pull image & restart)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: ${{ steps.sshkey.outputs.key_path }}
          port: 22
          script: |
            set -e
            cd "${{ env.APP_PATH }}"
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo usermod -aG docker $USER || true
            fi
            echo "Deploying image $IMAGE_NAME:latest"
            export TAG=latest
            docker compose pull
            docker compose up -d
            docker image prune -f
            docker compose ps
